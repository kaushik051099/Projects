{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":9474160,"sourceType":"datasetVersion","datasetId":5761866}],"dockerImageVersionId":30775,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/mansha99/understanding-magazine-subscription-behavior?scriptVersionId=198148830\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"code","source":"# %%\nimport pandas as pd\nimport numpy as np\nfrom sklearn.datasets import load_iris\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n# %%\nmarketing = pd.read_excel(\"/kaggle/input/marketing/marketing_campaign.xlsx\", header=0)\n\n# %%\nmarketing.head()\n\n# %%\nmarketing.info()\n\n# %%\nmarketing.shape\n\n# %%\nmarketing.columns\n\n# %%\nmarketing.dtypes\n\n# %%\nmarketing.describe().T\n\n# %%\nmarketing.isnull().sum()\n\n# %%\nmarketing.isna().sum()\n\n# %%\nmarketing['Income'] = marketing['Income'].fillna(value=marketing[\"Income\"].mean())\nmarketing\n\n# %%\nmarketing = marketing.drop_duplicates()\nmarketing.shape\n\n# %%\nmarketing[\"Year_Birth\"] = 2024-marketing[\"Year_Birth\"]\nmarketing = marketing.rename(columns={\n    \"Year_Birth\": \"Age\"})\n\n# %%\nmarketing = marketing.drop(['ID','Z_CostContact','Z_Revenue','Dt_Customer'], axis=1)\n\n# %%\nmarketing[\"Education\"] = marketing[\"Education\"].map(lambda x: \"Undergraduate\" if x in [\"Basic\", \"2n Cycle\"] \n                                          else \"Graduate\" if x == \"Graduation\" \n                                          else \"Postgraduate\" if x in [\"Master\", \"PhD\"] \n                                          else x) \n\n# %%\nmarketing['Marital_Status'] = marketing['Marital_Status'].map(lambda x: 'Single' if x in ['Alone', 'YOLO', 'Absurd','Widow','Divorced'] \n                                                else 'Married' if x == 'Together' \n                                                else x)\n\n# %%\nmarketing['Kids'] = marketing['Kidhome'] + marketing['Teenhome']\nmarketing = marketing.drop(['Kidhome','Teenhome'], axis=1)\n\n# %%\nmarketing = marketing.rename(columns={\n    \"MntWines\": \"Amount - Wine\",\"MntFruits\": \"Amount - Fruits\",\"MntMeatProducts\": \"Amount - Meat\",\"MntFishProducts\": \"Amount - Fish\",\"MntSweetProducts\": \"Amount - Sweet\",\"MntGoldProds\": \"Amount - Gold\"})\n\n\n# %%\nmarketing\n\n# %%\neducation_counts = marketing['Education'].value_counts()\nmarried_counts = marketing['Marital_Status'].value_counts()\nplt.figure(figsize=(16, 8))\nplt.subplot(1, 2, 1) \nplt.pie(education_counts, labels=education_counts.index, colors=['#938dd2', '#F39B7FFF', 'turquoise'], autopct='%1.1f%%', startangle=140, wedgeprops=dict(edgecolor='black', linewidth=1))\nplt.title(\"Each Category in Education Variable\", fontsize=24)\n\nplt.subplot(1, 2, 2) \nplt.pie(married_counts, labels=married_counts.index, colors=['#938dd2', '#F39B7FFF'], autopct='%1.1f%%', startangle=140, wedgeprops=dict(edgecolor='black', linewidth=1))\nplt.title(\"Each Category in Marital Status Variable\", fontsize=24)\n\nplt.show()\n\n# %%\nnumerical_columns = marketing.select_dtypes(include=['int64', 'float64']).columns\nplt.figure(figsize=(20, 15))\nfor feature in numerical_columns:\n    plt.subplot(6, 4, numerical_columns.to_list().index(feature) + 1)\n    sns.histplot(data=marketing[feature], bins=20, kde=True)\n    plt.title(feature)\nplt.tight_layout()\nplt.show()\n\n# Select only numeric columns for correlation\nnumeric_columns = marketing.select_dtypes(include=['number']).columns\n\n# %%\nif len(numeric_columns) > 0:\n    correlation_matrix = marketing[numeric_columns].corr()\n\n    # Create heatmap\n    plt.figure(figsize=(20, 15))\n    cmap = sns.color_palette(\"coolwarm\", as_cmap=True)\n    ax = sns.heatmap(correlation_matrix, annot=True, square=True, fmt='.2f', linecolor='black', cmap=cmap)\n    ax.set_xticklabels(ax.get_xticklabels(), rotation=90)\n    ax.set_yticklabels(ax.get_yticklabels(), rotation=30)\n    plt.title(\"Correlation Heatmap\")\n    plt.show()\nelse:\n    print(\"No numeric columns available for correlation.\")\n\n\n# %%\nmarketing.dtypes\n\n# %%\nfrom sklearn.preprocessing import LabelEncoder\nlabel_encoder = LabelEncoder()\ncategorical_cols = marketing.select_dtypes(include=['object']).columns\nfor col in categorical_cols:\n    marketing[col] = label_encoder.fit_transform(marketing[col])\n\n# %%\nfrom sklearn.preprocessing import MinMaxScaler\nscaler = MinMaxScaler()\nmarketing[numerical_columns] = scaler.fit_transform(marketing[numerical_columns])\nmarketing\n\n# %%\nfrom sklearn.model_selection import train_test_split\nX = marketing.drop('Response', axis=1)\ny = marketing['Response']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\nX_train.shape, X_test.shape, y_train.shape, y_test.shape\n\n# %%\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score, classification_report, confusion_matrix\n\nlogistic_model = LogisticRegression(random_state=42)\nlogistic_model.fit(X_train, y_train)\n\ny_pred = logistic_model.predict(X_test)\naccuracy = accuracy_score(y_test, y_pred)\nconfusion_mat = confusion_matrix(y_test, y_pred)\nclassification_rep = classification_report(y_test, y_pred)\n\nprint(f\"Accuracy: {accuracy:.3f}\")\nprint(\"Confusion Matrix:\\n\", confusion_mat)\nprint(\"Classification Report:\\n\", classification_rep)\n\n# %%\nimport statsmodels.api as sm\nX = sm.add_constant(X)\n\nlogit_model = sm.Logit(y, X)\nresult = logit_model.fit()\n\nprint(result.summary())\n\n# %%\nfrom sklearn.svm import SVC\nsvm_model = SVC(kernel='linear')\nsvm_model.fit(X_train, y_train)\n\ny_pred_svm = svm_model.predict(X_test)\nsvm_accuracy = accuracy_score(y_test, y_pred_svm)\nsvm_conf_matrix = confusion_matrix(y_test, y_pred_svm)\nsvm_report = classification_report(y_test, y_pred_svm)\n\nprint(f\"Accuracy: {svm_accuracy:.3f}\")\nprint(\"Confusion Matrix:\\n\", svm_conf_matrix)\nprint(\"Classification Report:\\n\", svm_report)\n\n# %%\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 5))\nsns.heatmap(svm_conf_matrix, annot=True, fmt='d', cmap='Reds', ax=ax1)\nax1.set_xlabel('Predicted labels')\nax1.set_ylabel('True labels')\nax1.set_title('Confusion Matrix - SVM')\n\nsns.heatmap(confusion_mat, annot=True, fmt='d', cmap='Blues', ax=ax2)\nax2.set_xlabel('Predicted labels')\nax2.set_ylabel('True labels')\nax2.set_title('Confusion Matrix - Logistic Regression')\n\n# %%","metadata":{"execution":{"iopub.status.busy":"2024-09-25T00:15:59.859448Z","iopub.execute_input":"2024-09-25T00:15:59.86006Z","iopub.status.idle":"2024-09-25T00:16:12.785301Z","shell.execute_reply.started":"2024-09-25T00:15:59.860015Z","shell.execute_reply":"2024-09-25T00:16:12.784093Z"},"trusted":true},"execution_count":null,"outputs":[]}]}